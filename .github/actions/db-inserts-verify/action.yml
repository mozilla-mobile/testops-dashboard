name: Run report and verify inserts
description: Runs a command, parses ROWS_INSERTED=N, and enforces zero policy

inputs:
  report_name:
    description: Logical name of the report (for messages)
    required: true
  run:
    description: Shell command to run the report (must print ROWS_INSERTED=N)
    required: true
  zero_ok:
    description: 'Allow zero inserts without failing (true/false)'
    required: false
    default: 'false'
  parse_regex:
    description: RegEx to capture ROWS_INSERTED=NNN (advanced override)
    required: false
    default: '^ROWS_INSERTED=([0-9]+)$'

runs:
  using: composite
  steps:
    - name: Run report
      id: runreport
      shell: bash
      run: |
        set -euo pipefail
        echo "[verify] running: ${{ inputs.run }}"
        bash -lc '${{ inputs.run }}' | tee report.out
        # Find last ROWS_INSERTED line; default 0 if absent
        count=$(grep -Eo "${{ inputs.parse_regex }}" report.out                   | sed -E 's/.*=([0-9]+).*//' | tail -n1 || true)
        if [[ -z "${count:-}" ]]; then count=0; fi
        echo "rows_inserted=${count}" >> "$GITHUB_OUTPUT"

    - name: Enforce non-zero inserts
      if: steps.runreport.outputs.rows_inserted == '0' && inputs.zero_ok != 'true'
      shell: bash
      run: |
        echo "::error::Report '${{ inputs.report_name }}' expected inserts but got 0"
        exit 1

    - name: Diagnostic (zero allowed)
      if: steps.runreport.outputs.rows_inserted == '0' && inputs.zero_ok == 'true'
      shell: bash
      run: |
        echo "::warning::Report '${{ inputs.report_name }}' inserted 0 rows (allowed)"
