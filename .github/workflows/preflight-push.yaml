name: Testops Check All Jobs on Push

on:
  pull_request:
  push:
    branches:
    - master 
  workflow_dispatch:
    inputs:
      branchName:
        description: 'Default branch'
        required: true
        default: 'master'

jobs:
  deploy:
    name: Testops Check All Jobs on Push
    runs-on: ubuntu-latest

    steps:
      - name: Check out source repository
        uses: actions/checkout@v4

      - name: Setup python 
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Establish Cloud SQL Proxy
        uses: mattes/gce-cloudsql-proxy-action@v1
        with:
          creds: ${{ secrets.GCLOUD_AUTH }}
          instance: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
          port: ${{ secrets.CLOUD_SQL_DATABASE_PORT }}

      - name: Install requirements 
        run: |
            pip install -r requirements.txt

      - name: Set env vars 
        run: |
            echo "CLOUD_SQL_DATABASE_USERNAME=${{ secrets.CLOUD_SQL_DATABASE_USERNAME }}" >> $GITHUB_ENV
            echo "CLOUD_SQL_DATABASE_PASSWORD=${{ secrets.CLOUD_SQL_DATABASE_PASSWORD }}" >> $GITHUB_ENV
            echo "CLOUD_SQL_DATABASE_NAME=preflight" >> $GITHUB_ENV
            echo "CLOUD_SQL_DATABASE_PORT=${{ secrets.CLOUD_SQL_DATABASE_PORT }}" >> $GITHUB_ENV
            echo "TESTRAIL_HOST=${{ secrets.TESTRAIL_HOST }}" >> $GITHUB_ENV
            echo "TESTRAIL_USERNAME=${{ secrets.TESTRAIL_USERNAME }}" >> $GITHUB_ENV
            echo "TESTRAIL_PASSWORD=${{ secrets.TESTRAIL_PASSWORD }}" >> $GITHUB_ENV
            echo "ATLASSIAN_API_TOKEN=${{ secrets.ATLASSIAN_API_TOKEN }}" >> $GITHUB_ENV
            echo "ATLASSIAN_HOST=${{ secrets.ATLASSIAN_HOST }}" >> $GITHUB_ENV
            echo "ATLASSIAN_USERNAME=${{ secrets.ATLASSIAN_USERNAME }}" >> $GITHUB_ENV
            echo "JIRA_HOST=${{ secrets.JIRA_HOST }}" >> $GITHUB_ENV
            echo "JIRA_USER=${{ secrets.JIRA_USER }}" >> $GITHUB_ENV
            echo "JIRA_PASSWORD=${{ secrets.JIRA_PASSWORD }}" >> $GITHUB_ENV
            echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
            echo "BUGZILLA_API_KEY=${{ secrets.BUGZILLA_API_KEY }}" >> $GITHUB_ENV
            echo "BITRISE_HOST=${{ secrets.BITRISE_HOST }}" >> $GITHUB_ENV
            echo "BITRISE_APP_SLUG=${{ secrets.BITRISE_APP_SLUG }}" >> $GITHUB_ENV
            echo "BITRISE_TOKEN=${{ secrets.BITRISE_TOKEN }}" >> $GITHUB_ENV
            echo "SENTRY_HOST=${{ secrets.SENTRY_HOST }}" >> $GITHUB_ENV
            echo "SENTRY_API_TOKEN=${{ secrets.SENTRY_API_TOKEN_CSO }}" >> $GITHUB_ENV
            echo "SENTRY_ORGANIZATION_SLUG=${{ secrets.SENTRY_ORGANIZATION_SLUG }}" >> $GITHUB_ENV
            echo "SENTRY_PROJECT_ID=${{ secrets.SENTRY_PROJECT_ID }}" >> $GITHUB_ENV
      # TestRail
      - name: Mobile Test Case Coverage
        run: python ./__main__.py --report-type testrail-test-case-coverage --platform mobile --project ALL

      - name: Desktop Test Case Coverage
        run: python ./__main__.py --report-type testrail-test-case-coverage --platform desktop --project ALL

      - name: Desktop Query Test Plans and Runs
        run: python ./__main__.py --platform desktop --project firefox-desktop --report-type testrail-test-plans-and-runs --num-days 30

      - name: Testrail Users
        run: python ./__main__.py --report-type testrail-users

      - name: Mobile testrail milestones
        run: python3 ./__main__.py --platform mobile --project ALL --report-type testrail-milestones
  
      # Jira
      - name: Jira query qa-needed
        if: always()
        run: python ./__main__.py --report-type jira-qa-needed

      - name: Jira query qa-requests
        run: python ./__main__.py --report-type jira-qa-requests

      - name: Jira Softvision Worklogs
        run: python ./__main__.py --report-type jira-softvision-worklogs

      # Bugzilla
      - name: Bugzilla query qe-verify
        if: always()
        run: python ./__main__.py --report-type bugzilla-qe-verify

      - name: Bugzilla Metabug Android Memory Leaks
        run: python  ./__main__.py --report-type bugzilla-meta-bugs --meta-bug-id 1935100

      - name: Bugzilla Desktop Bugs
        run: python ./__main__.py --report-type bugzilla-desktop-bugs

      # Bitrise
      - name: Bitrise Build Count
        if: always()
        run: python ./__main__.py --platform mobile --project firefox-ios --report-type bitrise-builds

      # Sentry
      - name: Sentry query
        run: |
          python __main__.py --report-type sentry-issues
          python __main__.py --report-type sentry-rates 
      - name: Upload Sentry issues csv
        uses: actions/upload-artifact@v4
        with:
          name: sentry_issues
          path: ./sentry_issues_*.csv
      - name: Construct JSON for Slack (Sentry)
        run: |
          python -m lib.sentry_slack_rates ./sentry_rates.csv

      - name: Set job log URL
        if: always()
        run: echo "JOB_LOG_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Send custom JSON data to Slack workflow
        if: always()
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        env:
          WORKFLOW_NAME: ${{ github.workflow }}
          BRANCH_NAME: ${{ github.ref_name }}
          JOB_STATUS: ${{ job.status == 'success' && ':white_check_mark:' || job.status == 'failure' && ':x:' }}
          JOB_STATUS_COLOR: ${{ job.status == 'success' && '#36a64f' || job.status == 'failure' && '#FF0000' }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_MOBILE_ALERTS_TOOLING }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

        with:
          payload-file-path: "./config/payload-slack-content.json"
