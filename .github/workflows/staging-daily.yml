name: Mobile Testops Report DAILY - Staging

# Daily @4am UTC
on:
  schedule:
    - cron:  "0 4 * * *"

  workflow_dispatch:
    inputs:
      branchName:
        description: 'Default branch'
        required: true
        default: 'master'

jobs:
  deploy:
    name: Mobile TestOps Report (DAILY) 
    runs-on: ubuntu-latest

    steps:
      - name: Check out source repository
        uses: actions/checkout@v5

      - name: Setup python 
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Establish Cloud SQL Proxy
        uses: mattes/gce-cloudsql-proxy-action@v1
        with:
          creds: ${{ secrets.GCLOUD_AUTH }}
          instance: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
          port: ${{ secrets.CLOUD_SQL_DATABASE_PORT }}

      - name: Install requirements 
        run: pip install -r requirements.txt

      - name: Set env vars 
        run: |
            echo "CLOUD_SQL_DATABASE_USERNAME=${{ secrets.CLOUD_SQL_DATABASE_USERNAME }}" >> $GITHUB_ENV
            echo "CLOUD_SQL_DATABASE_PASSWORD=${{ secrets.CLOUD_SQL_DATABASE_PASSWORD }}" >> $GITHUB_ENV
            echo "CLOUD_SQL_DATABASE_NAME=staging" >> $GITHUB_ENV
            echo "CLOUD_SQL_DATABASE_PORT=${{ secrets.CLOUD_SQL_DATABASE_PORT }}" >> $GITHUB_ENV
            echo "TESTRAIL_HOST=${{ secrets.TESTRAIL_HOST }}" >> $GITHUB_ENV
            echo "TESTRAIL_USERNAME=${{ secrets.TESTRAIL_USERNAME }}" >> $GITHUB_ENV
            echo "TESTRAIL_PASSWORD=${{ secrets.TESTRAIL_PASSWORD }}" >> $GITHUB_ENV
            echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
            echo "JIRA_HOST=${{ secrets.JIRA_HOST }}" >> $GITHUB_ENV
            echo "JIRA_USER=${{ secrets.JIRA_USER }}" >> $GITHUB_ENV
            echo "JIRA_PASSWORD=${{ secrets.JIRA_PASSWORD }}" >> $GITHUB_ENV

            echo "BUGZILLA_API_KEY=${{ secrets.BUGZILLA_API_KEY }}" >> $GITHUB_ENV

            echo "ATLASSIAN_API_TOKEN=${{ secrets.ATLASSIAN_API_TOKEN }}" >> $GITHUB_ENV
            echo "ATLASSIAN_HOST=${{ secrets.ATLASSIAN_HOST }}" >> $GITHUB_ENV
            echo "ATLASSIAN_USERNAME=${{ secrets.ATLASSIAN_USERNAME }}" >> $GITHUB_ENV
            
            echo "BITRISE_APP_SLUG=${{ secrets.BITRISE_APP_SLUG }}" >> $GITHUB_ENV
            echo "BITRISE_HOST=${{ secrets.BITRISE_HOST }}" >> $GITHUB_ENV
            echo "BITRISE_TOKEN=${{ secrets.BITRISE_TOKEN }}" >> $GITHUB_ENV

            echo "SENTRY_HOST=${{ secrets.SENTRY_HOST }}" >> $GITHUB_ENV
            echo "SENTRY_API_TOKEN=${{ secrets.SENTRY_API_TOKEN_CSO }}" >> $GITHUB_ENV
            echo "SENTRY_ORGANIZATION_SLUG=${{ secrets.SENTRY_ORGANIZATION_SLUG }}" >> $GITHUB_ENV
            echo "SENTRY_IOS_PROJECT_ID=${{ secrets.SENTRY_IOS_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SENTRY_FENIX_PROJECT_ID=${{ secrets.SENTRY_FENIX_PROJECT_ID }}" >> $GITHUB_ENV

      - name: Jira query QA Requests
        run: python ./__main__.py --platform mobile --project ALL --report-type jira-qa-requests

      - name: Jira query Worklogs
        run: python ./__main__.py --report-type jira-softvision-worklogs

      - name: Bugzilla Desktop Bugs
        run: python ./__main__.py --report-type bugzilla-desktop-bugs

      - name: Bugzilla Metabug Android Memory Leaks
        run: python  ./__main__.py --report-type bugzilla-meta-bugs --meta-bug-id 1935100

      - name: Bugzilla Android UI Tests Bugs Caught
        run: python ./__main__.py --report-type bugzilla-query-by-keyword --bz-keyword "ui-test-bug-auto-found"

      - name: Bitrise builds count
        run: python3 ./__main__.py --report-type bitrise-builds

      - name: Sentry query (iOS)
        run: |
          python __main__.py --report-type sentry-issues --project firefox-ios
          python __main__.py --report-type sentry-rates --project firefox-ios
        continue-on-error: true
      - name: Construct JSON for Slack (iOS)
        run: |
          python -m api.sentry.utils --file ./sentry_rates.csv --project firefox-ios
          ls sentry-slack-firefox-ios.json
        continue-on-error: true

      - name: Sentry query (Android)
        run: |
          python __main__.py --report-type sentry-issues --project fenix
          python __main__.py --report-type sentry-rates --project fenix
        continue-on-error: true
      - name: Construct JSON for Slack (Android)
        run: |
          python -m api.sentry.utils --file ./sentry_rates.csv --project fenix
          ls sentry-slack-fenix.json
        continue-on-error: true        
